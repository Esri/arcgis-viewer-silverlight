<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ExceptionAdditionConverterDoesNotSupportType" xml:space="preserve">
    <value>AdditionConverter 不支持类型 {0}</value>
  </data>
  <data name="ExceptionCannotcallSyncronousMethodGetFileAsText" xml:space="preserve">
    <value>在 Silverlight 中无法调用同步方法 GetFileAsText。请使用 GetFileAsTextAsync 来代替。</value>
  </data>
  <data name="ExceptionCannotCompareWith" xml:space="preserve">
    <value>无法与 {0} 进行比较</value>
  </data>
  <data name="ExceptionCannotDeserializeResponse" xml:space="preserve">
    <value>无法反序列化响应</value>
  </data>
  <data name="ExceptionClusterer" xml:space="preserve">
    <value>簇</value>
  </data>
  <data name="ExceptionConfigFileUrlMustBeSpecified" xml:space="preserve">
    <value>必须指定 ConfigFileUrl</value>
  </data>
  <data name="ExceptionConfigurationFileEmpty" xml:space="preserve">
    <value>配置文件为空</value>
  </data>
  <data name="ExceptionConfigurationXmlIsEmpty" xml:space="preserve">
    <value>配置文件 xml 为空</value>
  </data>
  <data name="ExceptionDataSource" xml:space="preserve">
    <value>dataSource</value>
  </data>
  <data name="ExceptionElement" xml:space="preserve">
    <value>元素</value>
  </data>
  <data name="ExceptionEmptyFile" xml:space="preserve">
    <value>空文件</value>
  </data>
  <data name="ExceptionExtensionUrl" xml:space="preserve">
    <value>扩展 URL</value>
  </data>
  <data name="ExceptionFileNotFound" xml:space="preserve">
    <value>未找到文件</value>
  </data>
  <data name="ExceptionGraphicsLayer" xml:space="preserve">
    <value>graphicsLayer</value>
  </data>
  <data name="ExceptionIdforDataSourceMustNotBeEmpty" xml:space="preserve">
    <value>dataSource 的 ID 不能为空</value>
  </data>
  <data name="ExceptionInconsistentTotalNumberOfValues" xml:space="preserve">
    <value>值的总数不一致</value>
  </data>
  <data name="ExceptionInvalidFileMustBeUrlForSilverlightApplication" xml:space="preserve">
    <value>文件无效。只有 URL 可用于 Silverlight 应用程序</value>
  </data>
  <data name="ExceptionInvalidPathForresourceDictionary" xml:space="preserve">
    <value>资源字典 {0} 的路径无效</value>
  </data>
  <data name="ExceptionLayer" xml:space="preserve">
    <value>图层</value>
  </data>
  <data name="ExceptionMap" xml:space="preserve">
    <value>地图</value>
  </data>
  <data name="ExceptionMustSpecifyConfigurationFile" xml:space="preserve">
    <value>必须指定 ConfigurationFile</value>
  </data>
  <data name="ExceptionMustSpecifyFile" xml:space="preserve">
    <value>必须指定文件</value>
  </data>
  <data name="ExceptionMustSpecifyFileUrl" xml:space="preserve">
    <value>必须指定 FileUrl</value>
  </data>
  <data name="ExceptionMustSpecifyLocatorUrl" xml:space="preserve">
    <value>必须指定 LocatorUrl</value>
  </data>
  <data name="ExceptionMustSpecifyValidFileUrl" xml:space="preserve">
    <value>必须指定有效的 FileUrl</value>
  </data>
  <data name="ExceptionNamespaces" xml:space="preserve">
    <value>namespaces</value>
  </data>
  <data name="ExceptionNoBrushesFound" xml:space="preserve">
    <value>未找到任何画笔</value>
  </data>
  <data name="ExceptionNoDefaultSymbolsFoundInDictionaryForGeometryType" xml:space="preserve">
    <value>没有在字典 {0} 中找到 geometrytype = {1} 的默认符号</value>
  </data>
  <data name="ExceptionNoResourceDictionaryAvailableForGeometryType" xml:space="preserve">
    <value>没有可用的 geometryType = {0} 的资源字典</value>
  </data>
  <data name="ExceptionNoResourceDictionaryfoundForGeometryType" xml:space="preserve">
    <value>没有找到 geometrytype = {0} 的资源字典</value>
  </data>
  <data name="ExceptionNoResultsFromProjection" xml:space="preserve">
    <value>投影无任何结果</value>
  </data>
  <data name="ExceptionNoSymbolAvailableInResourceDictionary" xml:space="preserve">
    <value>资源字典 {0} 中没有可用的符号</value>
  </data>
  <data name="ExceptionNoThemeFileUrlSpecified" xml:space="preserve">
    <value>未指定 ThemeFileUrl</value>
  </data>
  <data name="ExceptionNumberofGraphicsBeforeAndAfterProjectionAreNotEqual" xml:space="preserve">
    <value>投影前后的图形数量不相等</value>
  </data>
  <data name="ExceptionOutputSpatialReference" xml:space="preserve">
    <value>outputSpatialReference</value>
  </data>
  <data name="ExceptionRequiresPointValue" xml:space="preserve">
    <value>需要点值</value>
  </data>
  <data name="ExceptionResourceDictionaryEmpty" xml:space="preserve">
    <value>资源字典为空</value>
  </data>
  <data name="ExceptionSymbolConfigXmlEmpty" xml:space="preserve">
    <value>symbolConfigXml 为空</value>
  </data>
  <data name="ExceptionSymbolDescriptionValueNull" xml:space="preserve">
    <value>SymbolDescription 值为空</value>
  </data>
  <data name="ExceptionSymbolFolderParentUrlMustBeSpecified" xml:space="preserve">
    <value>必须指定 SymbolFolderParentUrl</value>
  </data>
  <data name="ExceptionUnableToLoadconfigurationStoreFromEmbeddedResource" xml:space="preserve">
    <value>无法从嵌入的资源中加载配置存储</value>
  </data>
  <data name="ExceptionUnableToParseFile" xml:space="preserve">
    <value>无法解析文件</value>
  </data>
  <data name="ExceptionUnableToRetrieveConnectionsFromEmbeddedResource" xml:space="preserve">
    <value>无法从嵌入的资源中检索连接</value>
  </data>
  <data name="ExceptionUnableToretrievedefaultLinearGradientBrushes" xml:space="preserve">
    <value>无法检索默认的线状渐变画笔</value>
  </data>
  <data name="ExceptionUnableToRetrieveLinearGradientBrushes" xml:space="preserve">
    <value>无法检索线状渐变画笔。</value>
  </data>
  <data name="ExceptionUnableToretrieveResourceDictionaryContents" xml:space="preserve">
    <value>无法检索资源字典内容</value>
  </data>
  <data name="ExceptionUnknownError" xml:space="preserve">
    <value>未知错误</value>
  </data>
  <data name="Graphics" xml:space="preserve">
    <value>图形</value>
  </data>
  <data name="NoneInAngleBraces" xml:space="preserve">
    <value>&lt;无&gt;</value>
  </data>
  <data name="Points" xml:space="preserve">
    <value>点</value>
  </data>
  <data name="FlagCheckered" xml:space="preserve">
    <value>方格旗</value>
  </data>
  <data name="FlagGreen" xml:space="preserve">
    <value>绿旗</value>
  </data>
  <data name="FlagRed" xml:space="preserve">
    <value>红旗</value>
  </data>
  <data name="FlagWhite" xml:space="preserve">
    <value>白旗</value>
  </data>
  <data name="FlagYellow" xml:space="preserve">
    <value>黄旗</value>
  </data>
  <data name="Pin2RedShiny" xml:space="preserve">
    <value>红色发光别针 2</value>
  </data>
  <data name="PinBlueShiny" xml:space="preserve">
    <value>蓝色发光别针</value>
  </data>
  <data name="PinGoldShiny" xml:space="preserve">
    <value>金色发光别针</value>
  </data>
  <data name="PinGreenShiny" xml:space="preserve">
    <value>绿色发光别针</value>
  </data>
  <data name="PinLightBlueShiny" xml:space="preserve">
    <value>浅蓝色发光别针</value>
  </data>
  <data name="PinLightGreenShiny" xml:space="preserve">
    <value>浅绿色发光别针</value>
  </data>
  <data name="PinPurpleShiny" xml:space="preserve">
    <value>紫色发光别针</value>
  </data>
  <data name="PinShiny" xml:space="preserve">
    <value>发光别针</value>
  </data>
  <data name="RedShinyPin" xml:space="preserve">
    <value>红色发光别针</value>
  </data>
  <data name="StickpinBlack" xml:space="preserve">
    <value>黑色别针</value>
  </data>
  <data name="StickpinBlue" xml:space="preserve">
    <value>蓝色别针</value>
  </data>
  <data name="StickpinBrown" xml:space="preserve">
    <value>褐色别针</value>
  </data>
  <data name="StickpinGray" xml:space="preserve">
    <value>灰色别针</value>
  </data>
  <data name="StickpinGreen" xml:space="preserve">
    <value>绿色别针</value>
  </data>
  <data name="StickpinLightBlue" xml:space="preserve">
    <value>浅蓝色别针</value>
  </data>
  <data name="StickpinOrange" xml:space="preserve">
    <value>橙色别针</value>
  </data>
  <data name="StickpinPurple" xml:space="preserve">
    <value>紫色别针</value>
  </data>
  <data name="StickpinRed" xml:space="preserve">
    <value>红色别针</value>
  </data>
  <data name="StickpinSpringGreen" xml:space="preserve">
    <value>春绿色别针</value>
  </data>
  <data name="StickpinWhite" xml:space="preserve">
    <value>白色别针</value>
  </data>
  <data name="StickpinYellow" xml:space="preserve">
    <value>黄色别针</value>
  </data>
  <data name="SymbolAmberBeacon" xml:space="preserve">
    <value>琥珀色信标</value>
  </data>
  <data name="SymbolBlackBeacon" xml:space="preserve">
    <value>黑色信标</value>
  </data>
  <data name="SymbolBlackWaypoint" xml:space="preserve">
    <value>黑色路点</value>
  </data>
  <data name="SymbolBlueBeacon" xml:space="preserve">
    <value>蓝色信标</value>
  </data>
  <data name="SymbolBlueSphere" xml:space="preserve">
    <value>蓝色球体</value>
  </data>
  <data name="SymbolBlueWaypoint" xml:space="preserve">
    <value>蓝色路点</value>
  </data>
  <data name="SymbolCapital1" xml:space="preserve">
    <value>首府 1</value>
  </data>
  <data name="SymbolCapital2" xml:space="preserve">
    <value>首府 2</value>
  </data>
  <data name="SymbolCircleX" xml:space="preserve">
    <value>圆圈 X</value>
  </data>
  <data name="SymbolCrossHair" xml:space="preserve">
    <value>十字准线</value>
  </data>
  <data name="SymbolGreenBeacon" xml:space="preserve">
    <value>绿色信标</value>
  </data>
  <data name="SymbolGreenSphere" xml:space="preserve">
    <value>绿色球体</value>
  </data>
  <data name="SymbolOrangeBeacon" xml:space="preserve">
    <value>橙色信标</value>
  </data>
  <data name="SymbolOrangeSphere" xml:space="preserve">
    <value>橙色球体</value>
  </data>
  <data name="SymbolPopulated1" xml:space="preserve">
    <value>居民区 1</value>
  </data>
  <data name="SymbolPopulated2" xml:space="preserve">
    <value>居民区 2</value>
  </data>
  <data name="SymbolPopulated3" xml:space="preserve">
    <value>居民区 3</value>
  </data>
  <data name="SymbolPopulated4" xml:space="preserve">
    <value>居民区 4</value>
  </data>
  <data name="SymbolPopulated5" xml:space="preserve">
    <value>居民区 5</value>
  </data>
  <data name="SymbolPopulated6" xml:space="preserve">
    <value>居民区 6</value>
  </data>
  <data name="SymbolPopulated7" xml:space="preserve">
    <value>居民区 7</value>
  </data>
  <data name="SymbolPurpleSphere" xml:space="preserve">
    <value>紫色球体</value>
  </data>
  <data name="SymbolRedBeacon" xml:space="preserve">
    <value>红色信标</value>
  </data>
  <data name="SymbolRedSphere" xml:space="preserve">
    <value>红色球体</value>
  </data>
  <data name="SymbolWhiteWaypoint" xml:space="preserve">
    <value>白色路点</value>
  </data>
  <data name="SymbolYellowArrow" xml:space="preserve">
    <value>黄色箭头</value>
  </data>
  <data name="SymbolYellowSphere" xml:space="preserve">
    <value>黄色球体</value>
  </data>
  <data name="ExceptionRequiresParameter" xml:space="preserve">
    <value>需要指定参数</value>
  </data>
  <data name="ExceptionAppendPropertyCalledOutsideOfAnObject" xml:space="preserve">
    <value>在对象之外调用 AppendProperty</value>
  </data>
  <data name="ExceptionBadEscape" xml:space="preserve">
    <value>错误转义</value>
  </data>
  <data name="ExceptionConverters" xml:space="preserve">
    <value>转换器</value>
  </data>
  <data name="ExceptionEndArrayCalledwithNoMatchingStartArray" xml:space="preserve">
    <value>在没有匹配的 StartArray 时调用 EndArray</value>
  </data>
  <data name="ExceptionEndArrayIndentedCalledwithNoMatchingStartArray" xml:space="preserve">
    <value>在没有匹配的 StartArray 时调用 EndArrayIndented</value>
  </data>
  <data name="ExceptionEndObjectCalledWithNoMatchingStartObject" xml:space="preserve">
    <value>在没有匹配的 StartObject 时调用 EndObject</value>
  </data>
  <data name="ExceptionEndObjectIndentedCalledWithNoMatchingStartObject" xml:space="preserve">
    <value>在没有匹配的 StartObject 时调用 EndObjectIndented</value>
  </data>
  <data name="ExceptionInput" xml:space="preserve">
    <value>输入</value>
  </data>
  <data name="ExceptionStartPropertycalledOutsideOfAnObject" xml:space="preserve">
    <value>在对象之外调用 StartProperty</value>
  </data>
  <data name="ExceptionType" xml:space="preserve">
    <value>类型</value>
  </data>
  <data name="ExceptionWritePropertyCalledOutsideOfAnObject" xml:space="preserve">
    <value>在对象之外调用 WriteProperty</value>
  </data>
  <data name="MoreInfo" xml:space="preserve">
    <value>更多信息</value>
  </data>
  <data name="RootVisualError" xml:space="preserve">
    <value>无法获取应用程序的根 Visual</value>
  </data>
  <data name="ExceptionNoResult" xml:space="preserve">
    <value>请求未返回结果</value>
  </data>
</root>