/*
(c) Copyright ESRI.
This source is subject to the Microsoft Public License (Ms-PL).
Please see https://opensource.org/licenses/ms-pl for details.
All other rights reserved.
*/

//      *********    DO NOT MODIFY THIS FILE     *********
//      This file is regenerated by a design tool. Making
//      changes to this file can cause errors.
namespace Expression.Blend.SampleData.ViewerDataSource
{
	using System;
    using System.Windows.Media.Imaging; 

// To significantly reduce the sample data footprint in your production application, you can set
// the DISABLE_SAMPLE_DATA conditional compilation constant and disable sample data at runtime.
#if DISABLE_SAMPLE_DATA
	internal class ViewerApplication { }
#else

	public class ViewerApplication : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		public ViewerApplication()
		{
			try
			{
				System.Uri resourceUri = new System.Uri("/$safeprojectname$;component/SampleData/ViewerDataSource/ViewerDataSource.xaml", System.UriKind.Relative);
				if (System.Windows.Application.GetResourceStream(resourceUri) != null)
				{
					System.Windows.Application.LoadComponent(this, resourceUri);
				}
			}
			catch (System.Exception)
			{
			}
		}

		private string _LogoFilePath = string.Empty;

		public string LogoFilePath
		{
			get
			{
				return _LogoFilePath;
			}

			set
			{
                if (this._LogoFilePath != value)
                {
                    this._LogoFilePath = value;
                    this.OnPropertyChanged("LogoFilePath");
                }
			}
		}

		private string _LayoutFilePath = string.Empty;

		public string LayoutFilePath
		{
			get
			{
				return this._LayoutFilePath;
			}

			set
			{
				if (this._LayoutFilePath != value)
				{
					this._LayoutFilePath = value;
					this.OnPropertyChanged("LayoutFilePath");
				}
			}
		}

		private string _TitleText = string.Empty;

		public string TitleText
		{
			get
			{
				return this._TitleText;
			}

			set
			{
				if (this._TitleText != value)
				{
					this._TitleText = value;
					this.OnPropertyChanged("TitleText");
				}
			}
		}

		private HelpLinkCollection _HelpLinks = new HelpLinkCollection();

		public HelpLinkCollection HelpLinks
		{
			get
			{
				return this._HelpLinks;
			}
		}

		private Extensions _Extensions = new Extensions();

		public Extensions Extensions
		{
			get
			{
				return this._Extensions;
			}

			set
			{
				if (this._Extensions != value)
				{
					this._Extensions = value;
					this.OnPropertyChanged("Extensions");
				}
			}
		}

		private AboutXaml _AboutXaml = new AboutXaml();

		public AboutXaml AboutXaml
		{
			get
			{
				return this._AboutXaml;
			}

			set
			{
				if (this._AboutXaml != value)
				{
					this._AboutXaml = value;
					this.OnPropertyChanged("AboutXaml");
				}
			}
		}

		private bool _ShowSidePanelLayerConfiguration = false;

		public bool ShowSidePanelLayerConfiguration
		{
			get
			{
				return this._ShowSidePanelLayerConfiguration;
			}

			set
			{
				if (this._ShowSidePanelLayerConfiguration != value)
				{
					this._ShowSidePanelLayerConfiguration = value;
					this.OnPropertyChanged("ShowSidePanelLayerConfiguration");
				}
			}
		}

		private string _GeometryService = string.Empty;

		public string GeometryService
		{
			get
			{
				return this._GeometryService;
			}

			set
			{
				if (this._GeometryService != value)
				{
					this._GeometryService = value;
					this.OnPropertyChanged("GeometryService");
				}
			}
		}

		private string _BingMapsAppId = string.Empty;

		public string BingMapsAppId
		{
			get
			{
				return this._BingMapsAppId;
			}

			set
			{
				if (this._BingMapsAppId != value)
				{
					this._BingMapsAppId = value;
					this.OnPropertyChanged("BingMapsAppId");
				}
			}
		}
	}

	public class HelpLink : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private string _DisplayText = string.Empty;

		public string DisplayText
		{
			get
			{
				return this._DisplayText;
			}

			set
			{
				if (this._DisplayText != value)
				{
					this._DisplayText = value;
					this.OnPropertyChanged("DisplayText");
				}
			}
		}

		private string _Url = string.Empty;

		public string Url
		{
			get
			{
				return this._Url;
			}

			set
			{
				if (this._Url != value)
				{
					this._Url = value;
					this.OnPropertyChanged("Url");
				}
			}
		}
	}

	public class Extensions : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}
	}

	public class AboutXaml : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private Paragraph _Paragraph = new Paragraph();

		public Paragraph Paragraph
		{
			get
			{
				return this._Paragraph;
			}

			set
			{
				if (this._Paragraph != value)
				{
					this._Paragraph = value;
					this.OnPropertyChanged("Paragraph");
				}
			}
		}
	}

	public class Paragraph : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private string _TextAlignment = string.Empty;

		public string TextAlignment
		{
			get
			{
				return this._TextAlignment;
			}

			set
			{
				if (this._TextAlignment != value)
				{
					this._TextAlignment = value;
					this.OnPropertyChanged("TextAlignment");
				}
			}
		}

		private Run _Run = new Run();

		public Run Run
		{
			get
			{
				return this._Run;
			}

			set
			{
				if (this._Run != value)
				{
					this._Run = value;
					this.OnPropertyChanged("Run");
				}
			}
		}
	}

	public class Run : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private string _FontWeight = string.Empty;

		public string FontWeight
		{
			get
			{
				return this._FontWeight;
			}

			set
			{
				if (this._FontWeight != value)
				{
					this._FontWeight = value;
					this.OnPropertyChanged("FontWeight");
				}
			}
		}
	}

	public class HelpLinkCollection : System.Collections.ObjectModel.ObservableCollection<HelpLink>
	{ 
	}
#endif
}
